import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

from config import logger
from database import init_db, update_player, reset_stats, get_stats

# –°–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
ANIMATION_DURATIONS = {
    "dart": 3,       
    "dice": 3.9,       
    "basketball": 4.4, 
    "football": 4.3,   
    "slot": 2.1, 
    "bowling": 3.5     
}

POINTS = {
    "dart": 10,
    "dice": 20,
    "basketball": 15,
    "football": 15,
    "bowling": 25,
    "slot": {
        1: ("üç´üç´üç´", 2),  # –•2
        43: ("üçãüçãüçã", 3),  # –•3
        22: ("üçíüçíüçí", 4),  # –•4
        64: ("7‚É£7‚É£7‚É£", 7)   # –•7
    }
}
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    keyboard = [
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å", callback_data="dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫–∏", callback_data="dice")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="basketball")],
        [InlineKeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª", callback_data="football")],
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data="slot")],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: "üé∞" -> "üé∞"
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="bowling")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
async def handle_game(update: Update, context: ContextTypes.DEFAULT_TYPE, game_type: str):
    chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
    query = update.callback_query if update.callback_query else None
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    username = update.message.from_user.username or "Unknown" if update.message else update.callback_query.from_user.username or "Unknown"

    if query:
        await query.answer()
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {game_type}")
        # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ callback_query
        reply_to_message_id = query.message.message_id
    else:
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {game_type}")
        # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ update.message
        reply_to_message_id = update.message.message_id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    emoji_type = {
        "dart": "üéØ",
        "dice": "üé≤",
        "basketball": "üèÄ",
        "football": "‚öΩÔ∏è",
        "slot": "üé∞",
        "bowling": "üé≥"
    }.get(game_type)

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏: {emoji_type}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    dice_message = await context.bot.send_dice(
        chat_id=chat_id,
        emoji=emoji_type,
        allow_sending_without_reply=True,  # –û–±—Ö–æ–¥ flood control
        reply_to_message_id=reply_to_message_id  # –û—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    wait_time = ANIMATION_DURATIONS.get(game_type, 3)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏: {wait_time} —Å–µ–∫—É–Ω–¥")
    await asyncio.sleep(wait_time)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ dice_message
    result_1 = dice_message.dice.value
    logger.info(f"–ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞: {result_1}")

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—É–±–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∫—É–±–∏–∫
    if game_type == "dice":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫
        second_dice_message = await context.bot.send_dice(
            chat_id=chat_id,
            emoji=emoji_type,
            allow_sending_without_reply=True,  # –û–±—Ö–æ–¥ flood control
            reply_to_message_id=reply_to_message_id  # –û—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        )

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞
        wait_time_second = ANIMATION_DURATIONS.get(game_type, 3)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫—É–Ω–¥—ã
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞: {wait_time_second} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(wait_time_second)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞
        result_2 = second_dice_message.dice.value
        logger.info(f"–í—Ç–æ—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞: {result_2}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–ª–∏ –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result_1 == result_2:
            interpreted_result = f"üé≤ –í—ã–ø–∞–ª–æ: {result_1} –∏ {result_2}. üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
            points = POINTS[game_type]
        else:
            interpreted_result = f"üé≤ –í—ã–ø–∞–ª–æ: {result_1} –∏ {result_2}. ‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if game_type == "dart":
            interpreted_result = "üéØ –ü–æ–ø–∞–ª –≤ —Ü–µ–Ω—Ç—Ä!" if result_1 == 6 else "‚ùå –ù–µ –ø–æ–ø–∞–ª –≤ —Ü–µ–Ω—Ç—Ä."
            points = POINTS[game_type] if result_1 == 6 else 0
        elif game_type == "basketball":
            interpreted_result = "üèÄ –ü–æ–ø–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É!" if result_1 in [4, 5] else "‚ùå –ù–µ –ø–æ–ø–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É."
            points = POINTS[game_type] if result_1 in [4, 5] else 0
        elif game_type == "football":
            interpreted_result = "‚öΩÔ∏è –ü–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞!" if result_1 in [3, 4, 5] else "‚ùå –ù–µ –ø–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞."
            points = POINTS[game_type] if result_1 in [3, 4, 5] else 0
        elif game_type == "bowling":
            interpreted_result = "üé≥ –°—Ç—Ä–∞–π–∫! üéâ –í—Å–µ –∫–µ–≥–ª–∏ —Å–±–∏—Ç—ã!" if result_1 == 6 else "‚ùå –ù–µ—É–¥–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            points = POINTS[game_type] if result_1 == 6 else 0
        elif game_type == "slot":
            slot_result = POINTS[game_type].get(result_1)
            if slot_result:
                winning_symbol, multiplier = slot_result
                interpreted_result = f"üé∞ –í—ã–ø–∞–ª–æ: {winning_symbol} üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x{multiplier}!"
                points = multiplier * 10  # Assuming 10 points base for slots
            else:
                interpreted_result = "‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
                points = 0
        else:
            interpreted_result = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_1}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if query:
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É {game_type.capitalize()}.\n{interpreted_result}"
        if points > 0:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
            message_text += f"\nüéØ –ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤: {points}"
        await query.edit_message_text(text=message_text)
    else:
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É {game_type.capitalize()}.\n{interpreted_result}"
        if points > 0:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
            message_text += f" –ù–∞—á–∏—Å–ª–µ–Ω–æ –æ—á–∫–æ–≤: {points}"
        await update.message.reply_text(text=message_text)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    update_player(user_id, username, points, chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def dart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "dart")

async def dice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "dice")

async def basketball_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "basketball")

async def football_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "football")

async def slot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "slot")

async def bowling_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "bowling")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
async def game_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    game_type = query.data
    await handle_game(update, context, game_type)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_all(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('all', chat_id)
    message = "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def stats_month(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('month', chat_id)
    message = "üìÖ(30) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def stats_week(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('week', chat_id)
    message = "üìÖ(7) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def stats_day(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('day', chat_id)
    message = "üìÖ(1) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)