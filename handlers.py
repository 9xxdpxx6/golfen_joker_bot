import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from datetime import datetime, timedelta
from collections import defaultdict

from config import logger
from database import init_db, update_player, get_stats, get_user_tokens, update_user_tokens, ensure_user_exists
from cookie_game import start_game, get_game, end_game

# –°–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
ANIMATION_DURATIONS = {
    "dart": 4.0,       
    "dice": 3.4,     # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫—É–±–∏–∫–æ–≤
    "basketball": 4.8, 
    "football": 4.7,   
    "slot": 2.5, 
    "bowling": 4.0     
}

POINTS = {
    "dart": 1200,      # –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä
    "dice": 600,       # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—É–±–∏–∫–æ–≤ (–±—É–¥–µ—Ç —É–º–Ω–æ–∂–∞—Ç—å—Å—è –Ω–∞ –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ)
    "basketball": 400, # –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    "football": 300,   # –ì–æ–ª
    "bowling": 600,    # –°—Ç—Ä–∞–π–∫
    "slot": {
        1: ("üç´üç´üç´", 2000),  # –¢—Ä–∏ –±–∞—Ä–∞
        43: ("üçãüçãüçã", 3000), # –¢—Ä–∏ –ª–∏–º–æ–Ω–∞
        22: ("üçíüçíüçí", 4000), # –¢—Ä–∏ –≤–∏—à–Ω–∏
        64: ("7‚É£7‚É£7‚É£", 7000)  # 777
    }
}
    
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ –∏–≥—Ä—ã
# –§–æ—Ä–º–∞—Ç: {user_id: {game_type: timestamp}}
last_game_timestamps = defaultdict(lambda: defaultdict(float))
COOLDOWN_SECONDS = 10

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏
BET_AMOUNT = 300

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
last_token_claims = defaultdict(float)
TOKEN_COOLDOWN = 7200  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def check_cooldown(user_id: int, game_type: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
    """
    last_timestamp = last_game_timestamps[user_id][game_type]
    if last_timestamp == 0:
        return True
        
    time_passed = datetime.now().timestamp() - last_timestamp
    return time_passed >= COOLDOWN_SECONDS

async def check_token_cooldown(user_id: int) -> tuple[bool, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–æ–∂–Ω–æ_–ø–æ–ª—É—á–∏—Ç—å, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è_–≤—Ä–µ–º—è)
    """
    last_claim = last_token_claims[user_id]
    if last_claim == 0:
        return True, 0
        
    time_passed = datetime.now().timestamp() - last_claim
    if time_passed >= TOKEN_COOLDOWN:
        return True, 0
    else:
        remaining = TOKEN_COOLDOWN - time_passed
        return False, int(remaining)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    keyboard = [
        [InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å", callback_data="dart")],
        [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫–∏", callback_data="dice")],
        [InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="basketball")],
        [InlineKeyboardButton("‚öΩÔ∏è –§—É—Ç–±–æ–ª", callback_data="football")],
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data="slot")], 
        [InlineKeyboardButton("üé≥ –ë–æ—É–ª–∏–Ω–≥", callback_data="bowling")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
async def handle_game(update: Update, context: ContextTypes.DEFAULT_TYPE, game_type: str):
    chat_id = update.message.chat_id if update.message else update.callback_query.message.chat_id
    query = update.callback_query if update.callback_query else None
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    username = update.message.from_user.username or "Unknown" if update.message else update.callback_query.from_user.username or "Unknown"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    current_tokens = get_user_tokens(user_id)
    if current_tokens < BET_AMOUNT:
        message = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {BET_AMOUNT}, —É –≤–∞—Å: {current_tokens}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tokens —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã"
        if query:
            await query.answer(text=message, show_alert=True)
        else:
            await update.message.reply_text(message)
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_tokens(user_id, -BET_AMOUNT)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if not await check_cooldown(user_id, game_type):
        remaining_time = COOLDOWN_SECONDS - (datetime.now().timestamp() - last_game_timestamps[user_id][game_type])
        cooldown_message = f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π –≤ {game_type.capitalize()}"
        if query:
            await query.answer(text=cooldown_message, show_alert=True)
            return
        else:
            await update.message.reply_text(cooldown_message)
            return

    if query:
        await query.answer()
        reply_to_message_id = query.message.message_id
    else:
        reply_to_message_id = update.message.message_id

    emoji_type = {
        "dart": "üéØ",
        "dice": "üé≤",
        "basketball": "üèÄ",
        "football": "‚öΩÔ∏è",
        "slot": "üé∞",
        "bowling": "üé≥"
    }.get(game_type)

    async def process_game_result():
        nonlocal points, interpreted_result
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        wait_time = ANIMATION_DURATIONS.get(game_type, 3) + 0.2
        await asyncio.sleep(wait_time)

        try:
            if game_type == "dice":
                result_1 = first_dice.dice.value
                result_2 = second_dice.dice.value
                if result_1 == result_2:
                    multiplier = result_1
                    points = POINTS[game_type] * multiplier
                    interpreted_result = f"üé≤ –í—ã–ø–∞–ª–æ: {result_1} –∏ {result_2}. üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! (x{multiplier})"
                else:
                    interpreted_result = f"üé≤ –í—ã–ø–∞–ª–æ: {result_1} –∏ {result_2}. ‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
                    points = 0
            else:
                result_1 = dice_message.dice.value
                if game_type == "dart":
                    interpreted_result = "üéØ –ü–æ–ø–∞–ª –≤ —Ü–µ–Ω—Ç—Ä!" if result_1 == 6 else "‚ùå –ù–µ –ø–æ–ø–∞–ª –≤ —Ü–µ–Ω—Ç—Ä."
                    points = POINTS[game_type] if result_1 == 6 else 0
                elif game_type == "basketball":
                    interpreted_result = "üèÄ –ü–æ–ø–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É!" if result_1 in [4, 5] else "‚ùå –ù–µ –ø–æ–ø–∞–ª –≤ –∫–æ—Ä–∑–∏–Ω—É."
                    points = POINTS[game_type] if result_1 in [4, 5] else 0
                elif game_type == "football":
                    interpreted_result = "‚öΩÔ∏è –ü–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞!" if result_1 in [3, 4, 5] else "‚ùå –ù–µ –ø–æ–ø–∞–ª –≤ –≤–æ—Ä–æ—Ç–∞."
                    points = POINTS[game_type] if result_1 in [3, 4, 5] else 0
                elif game_type == "bowling":
                    interpreted_result = "üé≥ –°—Ç—Ä–∞–π–∫! üéâ –í—Å–µ –∫–µ–≥–ª–∏ —Å–±–∏—Ç—ã!" if result_1 == 6 else "‚ùå –ù–µ—É–¥–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    points = POINTS[game_type] if result_1 == 6 else 0
                elif game_type == "slot":
                    slot_result = POINTS[game_type].get(result_1)
                    if slot_result:
                        winning_symbol, points = slot_result
                        interpreted_result = f"üé∞ –í—ã–ø–∞–ª–æ: {winning_symbol} üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
                    else:
                        interpreted_result = "‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
                        points = 0

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            if query:
                message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É {game_type.capitalize()}.\n{interpreted_result}"
                if points > 0:
                    message_text += f"\nüí∞ –í—ã–∏–≥—Ä—ã—à: {points} —Ç–æ–∫–µ–Ω–æ–≤"
                await query.edit_message_text(text=message_text)
            else:
                message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É {game_type.capitalize()}.\n{interpreted_result}"
                if points > 0:
                    message_text += f" –í—ã–∏–≥—Ä—ã—à: {points} —Ç–æ–∫–µ–Ω–æ–≤"
                await update.message.reply_text(text=message_text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            update_player(user_id, username, points, chat_id, game_type)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ä–∞–∑—É
    points = 0
    interpreted_result = ""
    
    if game_type == "dice":
        first_dice = await context.bot.send_dice(chat_id=chat_id, emoji=emoji_type)
        second_dice = await context.bot.send_dice(chat_id=chat_id, emoji=emoji_type)
    else:
        dice_message = await context.bot.send_dice(chat_id=chat_id, emoji=emoji_type)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    asyncio.create_task(process_game_result())

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    last_game_timestamps[user_id][game_type] = datetime.now().timestamp()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def dart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "dart")

async def dice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "dice")

async def basketball_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "basketball")

async def football_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "football")

async def slot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "slot")

async def bowling_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_game(update, context, "bowling")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
async def game_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    game_type = query.data
    await handle_game(update, context, game_type)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_all(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('all', chat_id)
    message = "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def stats_month(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('month', chat_id)
    message = "üìÖ(30) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def stats_week(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('week', chat_id)
    message = "üìÖ(7) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def stats_day(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('day', chat_id)
    message = "üìÖ(1) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def stats_hour(update: Update, context):
    chat_id = update.message.chat_id
    stats = get_stats('hour', chat_id)
    message = "‚è∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —á–∞—Å:\n"
    for idx, (username, points) in enumerate(stats, start=1):
        message += f"{idx}. @{username}: {points} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(message)

async def claim_tokens_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "Unknown"
    
    can_claim, remaining_seconds = await check_token_cooldown(user_id)
    
    if can_claim:
        ensure_user_exists(user_id, username)
        update_user_tokens(user_id, 10000)
        last_token_claims[user_id] = datetime.now().timestamp()
        await update.message.reply_text("üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10000 —Ç–æ–∫–µ–Ω–æ–≤!")
    else:
        hours = remaining_seconds // 3600
        minutes = (remaining_seconds % 3600) // 60
        await update.message.reply_text(
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω"
        )

async def cookie_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    current_tokens = get_user_tokens(user_id)
    if current_tokens < BET_AMOUNT:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {BET_AMOUNT}, —É –≤–∞—Å: {current_tokens}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /free_tokens —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã"
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_tokens(user_id, -BET_AMOUNT)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    message = await update.message.reply_text(
        "üç™ –ò–≥—Ä–∞ '–ü–µ—á–µ–Ω—å–∫–∞' –Ω–∞—á–∞–ª–∞—Å—å!\n–ù–∞–π–¥–∏—Ç–µ –ø–µ—á–µ–Ω—å–∫–∏ –∏ –Ω–µ –Ω–∞—Ä–≤–∏—Ç–µ—Å—å –Ω–∞ –±–æ–º–±—ã!"
    )
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º message_id
    game = start_game(chat_id, message.message_id, user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.edit_text(
        f"üç™ –ò–≥—Ä–∞ '–ü–µ—á–µ–Ω—å–∫–∞' –Ω–∞—á–∞–ª–∞—Å—å!\n–ò–≥—Ä–æ–∫: @{update.message.from_user.username}\n–ù–∞–π–¥–∏—Ç–µ –ø–µ—á–µ–Ω—å–∫–∏ –∏ –Ω–µ –Ω–∞—Ä–≤–∏—Ç–µ—Å—å –Ω–∞ –±–æ–º–±—ã!",
        reply_markup=game.get_keyboard()
    )

async def cookie_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    user_id = query.from_user.id
    
    game = get_game(chat_id, message_id)
    
    if not game:
        await query.edit_message_text(
            "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /cookie",
            reply_markup=None
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç –∂–µ –∏–≥—Ä–æ–∫
    if game.player_id != user_id:
        await query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º!")
        return

    data = query.data
    if data == "cookie_claim":
        reward = game.current_reward
        if reward > 0:
            update_user_tokens(user_id, reward)
            await query.edit_message_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–ò–≥—Ä–æ–∫ @{query.from_user.username} –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à: {reward} —Ç–æ–∫–µ–Ω–æ–≤!",
                reply_markup=None
            )
            end_game(chat_id, message_id)
        else:
            await query.answer("–ù–µ—á–µ–≥–æ –∑–∞–±–∏—Ä–∞—Ç—å! –û—Ç–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–µ—á–µ–Ω—å–∫—É.")
            return
    else:
        _, x, y = data.split('_')
        x, y = int(x), int(y)
        is_bomb, reward = game.open_cell(x, y)
        
        if is_bomb:
            await query.edit_message_text(
                f"üí• –ë–£–ú! –ò–≥—Ä–æ–∫ @{query.from_user.username} –ø–æ–ø–∞–ª—Å—è –Ω–∞ –±–æ–º–±—É! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
                reply_markup=game.get_keyboard()
            )
            end_game(chat_id, message_id)
        else:
            await query.edit_message_text(
                f"üç™ –ò–≥—Ä–æ–∫: @{query.from_user.username}\n–ù–∞–π–¥–µ–Ω–∞ –ø–µ—á–µ–Ω—å–∫–∞!\n–¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {reward} —Ç–æ–∫–µ–Ω–æ–≤\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –∑–∞–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑!",
                reply_markup=game.get_keyboard()
            )